May 16, 2016 Tasks

1)Given a Integer, find the maximum number that can be formed from the digits. 

Input : 8754365 

output : 8765543

Program:-

(Highest.java)

package org.pojos;

public class Highest {
	
	int digit;

	public int getDigit() {
		return digit;
	}

	public void setDigit(int digit) {
		this.digit = digit;
	}
	

}


(DigitComparator.java)

package org.comparators;

import java.util.Comparator;

import org.pojos.Highest;

public class DigitComparator implements Comparator<Highest>{

	@Override
	public int compare(Highest o1, Highest o2) {
		if(o1.getDigit()<o2.getDigit())
			return 1;
		else if(o1.getDigit()>o2.getDigit())
			return -1;
		else
			return 0;
	}
}

(HighestNumber.java)

package org.tasks;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import org.comparators.DigitComparator;
import org.pojos.Highest;


public class HighestNumber {

	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the number");
		int number = in.nextInt();
		int a=0;
		List<Integer> list = new ArrayList<Integer>();
		while(number!=0)
		{
			a=number%10;
			number=number/10;
			list.add(a);
		}
		Collections.sort(list);
		Iterator<Integer> ii =list.iterator();
		List<Highest> lh = new ArrayList<Highest>();
		while(ii.hasNext())
		{
			int x=ii.next();
			Highest high = new Highest();
			high.setDigit(x);
			lh.add(high);
		}
		Collections.sort(lh, new DigitComparator());
		Iterator<Highest> ih =lh.iterator();
		while(ih.hasNext())
		{
			Highest h =ih.next();
			System.out.print(h.getDigit());
		}
	}

}

2) Find the longest running positive sequence in an array - 

(Eg - [1,2,-3,2,3,4,-6,1,2,3,4,5,-8,5,6] )

It should return 5, with start index : 1 and ends at 5

Program:-

(LargestPositiveSequence.java)

package org.tasks;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.SortedMap;
import java.util.TreeMap;

public class LargestPositiveSequence {

	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the size of array");
		int number = in.nextInt();
		System.out.println("Enter the elements of array");
		int a[] = new int[50];
		for(int i=0;i<number;i++)
			a[i]=in.nextInt();
		SortedMap<Integer, List<Integer>> sm = new TreeMap<Integer, List<Integer>>();
		int count=0;
		List<Integer> list = new ArrayList<Integer>();
		for(int i=0;i<number;i++)
		{
			if(a[i]>=0)
			{
				count++;
				list.add(a[i]);
			}
			else if(a[i]<0)
			{
				sm.put(count, list);
				list = new ArrayList<Integer>();
				count = 0;
			}
			if(i==number-1)
			{
				sm.put(count, list);
				count=0;
			}
		}
		System.out.println("Count:"+sm.lastKey());
		List<Integer> lii =  sm.get(sm.lastKey());
		Iterator<Integer> ii =lii.iterator();
		System.out.print("Largest Positive Sequence is:");
		while(ii.hasNext())
		{
			System.out.print(" "+ii.next());
		}
	}
}

4) Write a program to find duplicate elements in array and total count of duplicate elements. 

(eg. arr={5,3,4,6,7,5,3,2,1} )

Duplicate elements:- 5,3 

Total duplicate count:- 2

Program:-

(DuplicateNumber.java)
package org.tasks;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;


public class DuplicateNumber {

	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the size of array");
		int number = in.nextInt();
		System.out.println("Enter the numbers");
		int a[] = new int[number];
		for(int i=0;i<number;i++)
			a[i]=in.nextInt();
		Hashtable<Integer, Integer> hii = new Hashtable<Integer, Integer>();
		int count=0;
		for(int i=0;i<a.length;i++)
		{
			int count1=0;
			int num=a[i];
			if(hii.containsKey(num))
			{
				count1=hii.get(num).intValue();
				hii.put(num, ++count1);
			}
			else
			{
				hii.put(num, 1);
			}
		}
		System.out.println("Duplicate elements are:");
		Set<Entry<Integer, Integer>> seii =hii.entrySet();
		Iterator<Entry<Integer, Integer>> ieii =seii.iterator();
		while(ieii.hasNext())
		{
			Entry<Integer, Integer> eii =ieii.next();
			if(eii.getValue()>1)
			{
				count++;
				System.out.println(eii.getKey()+" ");
			}
		}
		System.out.println("Total Duplicate elements count "+count);
	}

}


Another Program for Duplicate Numbers:-

(Duplicate Sample)

package org.tasks;

import java.util.HashSet;
import java.util.Scanner;

public class DuplicateSample {

	public static void main(String[] args) {
	
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the size of array");
		int number = in.nextInt();
		System.out.println("Enter the elements of array");
		int a[] = new int[number];
		for(int i=0;i<number;i++)
			a[i] = in.nextInt();
		HashSet<Integer> hs = new HashSet<Integer>();
		int count=0;
		System.out.print("Duplicate elements are: ");
		for(int element:a)
		{
			if(hs.contains(element))
			{
				System.out.print(" "+element);
				count++;
			}
			hs.add(element);
		}
		System.out.println("\nNo. of duplicate elements are:"+count);
	}

}



3) Write a program to test whether string s2 is obtained by rotating the string s1 by 2 places. 

(e.g S1="eagles" S2="elesag" return true 

S1="quality" S2="lityqua" return false)


Program:-

(StringSample.java)

package org.tasks;

import java.util.Scanner;

public class StringSample {
	
	public static boolean isRotated(String s1,String s2)
	{
		String s3 = s1.substring(1, 3);
		String s4 = s1.substring(0,1)+s1.substring(3, s1.length())+s3;
		if(s2.equalsIgnoreCase(s4))
			return true;
		else
			return false;
		
	}

	public static void main(String[] args) {
		
		Scanner in = new Scanner(System.in);
		System.out.println("Enter the string s1 and string s2");
		String s1 = in.next();
		String s2 =in.next();
		if(isRotated(s1, s2))
			System.out.println("True");
		else
			System.out.println("False");
	}

}


